{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst initialState = {\n  user: {\n    isLoggedIn: false,\n    user: null,\n    signUpData: {},\n    LoginData: {}\n  },\n  post: {\n    mainPosts: []\n  }\n}; //action creator\n\nexport const loginAction = data => {\n  return {\n    type: 'LOG_IN',\n    data\n  };\n}; //store.dispatch(changeNickname('dddd'))\n//(이전상태, 액션) => 다음상태\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'LOG_IN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: true,\n          user: action.data\n        })\n      });\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/namhyeonlee/Documents/frontend/react class/react-nodebird/reducers/index.js"],"names":["initialState","user","isLoggedIn","signUpData","LoginData","post","mainPosts","loginAction","data","type","rootReducer","state","action"],"mappings":";;;;;;AAAA,MAAMA,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,UAAU,EAAE,KADV;AAEFD,IAAAA,IAAI,EAAE,IAFJ;AAGFE,IAAAA,UAAU,EAAE,EAHV;AAIFC,IAAAA,SAAS,EAAC;AAJR,GADW;AAOjBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,SAAS,EAAC;AADR;AAPW,CAArB,C,CAaA;;AACA,OAAO,MAAMC,WAAW,GAAIC,IAAD,IAAU;AACjC,SAAO;AACHC,IAAAA,IAAI,EAAE,QADH;AAEHD,IAAAA;AAFG,GAAP;AAKH,CANM,C,CAOP;AAEA;;AACA,MAAME,WAAW,GAAI,CAACC,KAAK,GAAGX,YAAT,EAAuBY,MAAvB,KAAkC;AAEnD,UAAQA,MAAM,CAACH,IAAf;AACI,SAAK,QAAL;AACI,6CACOE,KADP;AAEIV,QAAAA,IAAI,kCACGU,KAAK,CAACV,IADT;AAEAC,UAAAA,UAAU,EAAE,IAFZ;AAGAD,UAAAA,IAAI,EAACW,MAAM,CAACJ;AAHZ;AAFR;AAFR;AAaH,CAfD;;AAiBA,eAAeE,WAAf","sourcesContent":["const initialState = {\n    user: {\n        isLoggedIn: false,\n        user: null,\n        signUpData: {},\n        LoginData:{}\n    },\n    post: {\n        mainPosts:[],\n    }\n}\n\n\n//action creator\nexport const loginAction = (data) => {\n    return {\n        type: 'LOG_IN',\n        data  \n    }\n\n}\n//store.dispatch(changeNickname('dddd'))\n\n//(이전상태, 액션) => 다음상태\nconst rootReducer = ((state = initialState, action) => {\n\n    switch (action.type) {\n        case 'LOG_IN':\n            return {\n                ...state,\n                user: {\n                    ...state.user,\n                    isLoggedIn: true,\n                    user:action.data\n                    \n                }\n            }\n        \n    }\n});\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}